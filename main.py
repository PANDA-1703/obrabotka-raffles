import asyncio

from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramRetryAfter
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from loguru import logger
from telethon import TelegramClient

from config import BOT_TOKEN, API_ID, API_HASH
from db.db import init_db, save_lottery
from services.folder_manager import create_invite_folder
from services.pollinations_api import send_to_pollinations
from services.subscriber import subscribe_current_user
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
client = TelegramClient("parser", API_ID, API_HASH)

user_states = {}
user_success_map = {}

message_semaphore = asyncio.Semaphore(3)  # –Ω–µ –±–æ–ª—å—à–µ 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
pollinations_queue = asyncio.Queue()

logger.add("bot.log", rotation="1 MB")  # –ª–æ–≥-—Ñ–∞–π–ª

reply_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –ø—Ä–∏—ë–º")]
    ],
    resize_keyboard=True
)


inline_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data="finish_collect")],
    [InlineKeyboardButton(text="üìÅ –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É", callback_data="create_folder")]
])


@dp.message(CommandStart())
async def cmd_start(msg: types.Message):
    await safe_send_message(msg,"üëã –ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à–∏.", reply_markup=reply_kb)


@dp.message(lambda msg: msg.text == "üöÄ –ù–∞—á–∞—Ç—å –ø—Ä–∏—ë–º")
async def start_collect_command(msg: types.Message):
    user_states[msg.from_user.id] = []
    await safe_send_message(msg, "üì© –ü–µ—Ä–µ—Å—ã–ª–∞–π—Ç–µ –ø–æ—Å—Ç—ã —Å —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏ –ø–æ –æ–¥–Ω–æ–º—É")


def normalize_link(link: str) -> str:
    if link.startswith("https://t.me/"):
        return "@" + link.split("/")[-1].lstrip('+')
    return link


async def safe_send_message(message: types.Message, text: str, **kwargs):
    async with message_semaphore:
        try:
            return await message.answer(text, **kwargs)
        except TelegramRetryAfter as e:
            logger.warning(f"[FloodWait] Telegram –ø—Ä–æ—Å–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.retry_after} —Å–µ–∫...")
            await asyncio.sleep(e.retry_after)
            return await message.answer(text, **kwargs)
        except Exception as e:
            logger.error(f"[safe_send_message] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")


@dp.message()
async def on_forwarded_message(msg: types.Message):
    try:
        user_id = msg.from_user.id
        if user_id not in user_states:
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º html_text ‚Äî –æ–Ω —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        text = msg.html_text or msg.text or msg.caption
        if not msg.forward_from_chat or not text:
            return await safe_send_message(msg, "‚õî –ü–µ—Ä–µ—Å—ã–ª–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –ø–æ–¥–ø–∏—Å—å—é")

        channel = msg.forward_from_chat
        source_link = (
            f"https://t.me/{channel.username}/{msg.forward_from_message_id}"
            if channel.username
            else f"https://t.me/c/{channel.id}/{msg.forward_from_message_id}"
        )

        post = {"text": text, "source_link": source_link}

        await safe_send_message(msg, "üß† –ü–æ—Å—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É‚Ä¶")

        # –ö–ª–∞–¥—ë–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ—Ä–∫–µ—Ä–æ–º
        await pollinations_queue.put(([post], msg))

    except asyncio.exceptions.TimeoutError:
        await safe_send_message(msg, "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await safe_send_message(msg, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–∞.")


@dp.callback_query(lambda c: c.data == "finish_collect")
async def on_finish(callback: CallbackQuery):
    user_id = callback.from_user.id
    channels = user_success_map.get(user_id)
    channels = list(set(channels))
    if not channels:
        return await safe_send_message(callback.message,"‚ùå –ù–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")

    await safe_send_message(callback.message,f"üîÑ –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ {len(channels)} –∫–∞–Ω–∞–ª–æ–≤...")
    result = await subscribe_current_user(
        list(channels),
        user_id,
        lambda text: safe_send_message(callback.message, text)
    )
    user_success_map[user_id] = result["successful"]

    all_channels = result['successful']
    chunk_size = 50
    chunks = [all_channels[i:i+chunk_size] for i in range(0, len(all_channels), chunk_size)]

    await safe_send_message(
        callback.message,f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(result['successful'])}, ‚ùå –û—à–∏–±–∫–∏: {len(result['failed'])}:\n{result['failed']}"
    )
    for chunk in chunks:
        await safe_send_message(callback.message,"üìã\n" + "\n".join(chunk))
    user_states.pop(user_id, None)
    return None


@dp.callback_query(lambda c: c.data == "create_folder")
async def on_create_folder(callback: CallbackQuery):
    user_id = callback.from_user.id
    channels = user_success_map.get(user_id)
    if not channels:
        return await safe_send_message(callback.message,"‚ùå –ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")

    await safe_send_message(callback.message,"üìÅ –°–æ–∑–¥–∞—é –ø–∞–ø–∫—É...")
    result = await create_invite_folder(channels, user_id)
    await safe_send_message(callback.message,f"‚úÖ {result}")

    del user_success_map[user_id]
    user_states.pop(user_id, None)
    return None


async def pollinations_worker():
    while True:
        posts, message = await pollinations_queue.get()
        try:
            result = await send_to_pollinations(posts)
            if not result:
                await safe_send_message(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å—Ç—ã")
                continue

            for item in result:
                await save_lottery(item)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
                chs = item.get("channels")
                if isinstance(chs, list):
                    chs = [normalize_link(c.strip()) for c in chs if isinstance(c, str) and c.strip() != "–Ω/–∑"]
                elif isinstance(chs, str):
                    chs = [normalize_link(c.strip()) for c in chs.split(",") if c.strip() != "–Ω/–∑"]
                else:
                    chs = []

                # üÜï –ï—Å–ª–∏ –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –¥–æ–±–∞–≤–∏–º –∫–∞–Ω–∞–ª, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–µ—Ä–µ—Å–ª–∞–ª–∏ –ø–æ—Å—Ç
                if not chs and message.forward_from_chat:
                    source_chat = message.forward_from_chat
                    if source_chat.username:
                        chs = [f"https://t.me/{source_chat.username}"]
                    else:
                        chs = [f"https://t.me/c/{source_chat.id}"]

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
                existing = user_success_map.setdefault(message.from_user.id, set())
                existing.update(chs)

                await safe_send_message(
                    message,
                    f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ\nüì¢ –ö–∞–Ω–∞–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(chs)}.\n{chs}",
                    reply_markup=inline_kb
                )

        except Exception as e:
            logger.exception(f"[pollinations_worker] –û—à–∏–±–∫–∞: {e}")
        finally:
            pollinations_queue.task_done()


async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await init_db()
    asyncio.create_task(pollinations_worker())  # –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Ä–∫–µ—Ä
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
